package module3;
//Java utilities libraries
import java.util.ArrayList;
import java.util.List;

//Processing library
import processing.core.PApplet;

//Unfolding libraries
import de.fhpotsdam.unfolding.UnfoldingMap;
import de.fhpotsdam.unfolding.core.Coordinate;
import de.fhpotsdam.unfolding.marker.Marker;
import de.fhpotsdam.unfolding.data.Feature;
import de.fhpotsdam.unfolding.data.PointFeature;
import de.fhpotsdam.unfolding.geo.Location;
import de.fhpotsdam.unfolding.marker.SimplePointMarker;
import de.fhpotsdam.unfolding.providers.Google;
import de.fhpotsdam.unfolding.providers.MBTilesMapProvider;
import de.fhpotsdam.unfolding.providers.OpenStreetMap;
import de.fhpotsdam.unfolding.utils.MapUtils;

//Parsing library
import parsing.ParseFeed;

/** EarthquakeCityMap
 * An application with an interactive map displaying earthquake data.
 * Author: UC San Diego Intermediate Software Development MOOC team
 * @author Dimas DeJesus 
 * Date: Saturday, November 25, 2017 Time:1739 PST (MIL-STD)
 * */
public class EarthquakeCityMapDimas extends PApplet {

	// You can ignore this.  It's to keep eclipse from generating a warning.
//	private static final long serialVersionUID = 1L;

	// IF YOU ARE WORKING OFFLINE, change the value of this variable to true
	private static final boolean offline = false;
	
	// Less than this threshold is a light earthquake
	public static final float THRESHOLD_MODERATE = 5;
	// Less than this threshold is a minor earthquake
	public static final float THRESHOLD_LIGHT = 4;

	/** This is where to find the local tiles, for working without an Internet connection */
	public static String mbTilesString = "blankLight-1-3.mbtiles";
		// List<PointFeature> earthquakesLocation = new ArrayList<PointFeature>();
	
		//now what goes here? data from the RSS feed?>> 12/2/17
		//Feature(Feature.FeatureType type) 
		//public java.lang.Object addProperty(java.lang.String key,java.lang.Object value)
		//Feature.FeatureType getType();
	

	///************************************* Class objects including initialization ******************************
	// The map
	private UnfoldingMap map;
	
	//feed with magnitude 2.5+ Earthquakes
	private String earthquakesURL = "https://earthquake.usgs.gov/earthquakes/feed/v1.0/summary/2.5_week.atom";

// ****************************************** SETUP ************************ BEGINS********************************	
	public void setup() {	
			size(950, 600, P2D);
	

		if (offline) {
		    map = new UnfoldingMap(this, 50, 50, 700, 500, new MBTilesMapProvider(mbTilesString));
		    earthquakesURL = "2.5_week.atom"; 	// Same feed, saved Aug 7, 2015, for working offline
		}
		else 
		{
			// Assume online
			map = new UnfoldingMap(this, 50, 50, 700, 500, new Google.GoogleMapProvider());
//			map = new UnfoldingMap(this, 200, 50, 700, 500, new OpenStreetMap.OpenStreetMapProvider() );
//		    map = new UnfoldingMap(this, 200, 50, 650, 600, new MBTilesMapProvider(mbTilesString));
				
		    map.zoomToLevel(1);
		    MapUtils.createDefaultEventDispatcher(this, map);	
		
			//*****			map = new UnfoldingMap(this, 200, 50, 700, 500, new Google.GoogleMapProvider());
			// IF YOU WANT TO TEST WITH A LOCAL FILE, uncomment the next line
			earthquakesURL = "2.5_week.atom";
		}
		
	   
	// "Sun 12/3/17 almost got it (class, object, method Java) my programmer's -'Writer's BLOCK' after many years. 1987"
	    				// method finally written 12/03/17: 
	    // Create a marker at a specific location in the world, and format it
	    Location valLoc = new Location(-38.14f,-73.03f);
	    Marker val = new SimplePointMarker(valLoc);
	    map.addMarker(val);
	    
	    //STAGE 2: Features with rich data, then Marker
	    
	    // First create Feature for details of Valdivia earthquake
//	    Location valLoc = new Location(-38.14f,-73.03f);
	    PointFeature valEq = new PointFeature(valLoc);
	    valEq.addProperty("title", "Valdivia, Chile");
	    valEq.addProperty("magnitude", "9.5");
	    valEq.addProperty("date", "May 22, 1960");
	    
	    Marker valMk = new SimplePointMarker(valLoc, valEq.getProperties());
	    map.addMarker(valMk);
	}
	
	
// initialized my methods to use later below...
//	    	List<Marker> features = new ArrayList<Marker>();
	    	
//	    		public Marker markers = new SimplePointMarker ();
//				public Point getLocation() {
//					return null;
//				}
//	    	}	
	    				//PointFeatures have a getLocation method
// duplicate list?? 12/3/17...	 List<PointFeature> earthquakesLocation = new ArrayList<PointFeature>(){
	    				//}	    	//Use provided parser to collect properties for each earthquake
//	    	List<PointFeature> earthquakes = ParseFeed.parseEarthquake(this, earthquakesURL);
	
	    				// The List you will populate with new SimplePointMarkers
	    				
	
	
	    //TODO (Step 3): Add a loop here that calls (createMarker) (see below) 
	    // to create a new SimplePointMarker for each PointFeature in 
	    // earthquakes.  Then add each new SimplePointMarker to the 
	    // List markers (so that it will be added to the map in the line below)
	    					// Here is my loop I'm just writing with a wing and a prayer, hoping I get it right!
	    					
//		   SimplePointMarker createMarker(PointFeature feature); { 
			// finish implementing and use this method, if it helps.
//			return null;
//		}
	  //  
	    // Add the markers to the map so that they are displayed
//	    map.addMarkers(markers);
//	}
// /*** End of Setup **** end of List<Marker> markers which contain features of actual earthquake data added
			// ...via Point Features array list inside the object earthquakesLocation (see line27)

		
	/* createMarker: A suggested helper method that takes in an earthquake 
	 * feature and returns a SimplePointMarker for that earthquake
	 * 
	 * In step 3 You can use this method as-is.  Call it from a loop in the 
	 * setup method.  
	 * 
	 * TODO (Step 4): Add code to this method so that it adds the proper 
	 * styling to each marker based on the magnitude of the earthquake.  
	*/
//**********	private SimplePointMarker createMarker(PointFeature feature)
	
		// To print all of the features in a PointFeature (so you can see what they are)
		// uncomment the line below.  Note this will only print if you call createMarker 
		// from setup
//		System.out.println(feature.getProperties());
		
		// Create a new SimplePointMarker at the location given by the PointFeature
///******		SimplePointMarker marker = new SimplePointMarker(feature.getLocation());
		
//*******		Object magObj = feature.getProperty("magnitude");
//****		float mag = Float.parseFloat(magObj.toString());
		
		// Here is an example of how to use Processing's color method to generate 
	    // an int that represents the color yellow.  
//*****	    int yellow = color(255, 255, 0);
		
		// TODO (Step 4): Add code below to style the marker's size and color 
	    // according to the magnitude of the earthquake.  
	    // Don't forget about the constants THRESHOLD_MODERATE and 
	    // THRESHOLD_LIGHT, which are declared above.
	    // Rather than comparing the magnitude to a number directly, compare 
	    // the magnitude to these variables (and change their value in the code 
	    // above if you want to change what you mean by "moderate" and "light")
	    
	    
	    // Finally return the marker
//***	    return marker;
//***	}
	
	public void draw() {
	    background(10);
	    map.draw();
//	    addKey();
	}


	// helper method to draw key in GUI
	// TODO: Implement this method to draw the key
//	private void addKey() 
//	{	
		// Remember you can use Processing's graphics methods here
	
}
//**** }
